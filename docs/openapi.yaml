openapi: 3.1.0
info:
  title: User and Movie API
  description: API for managing users and movies
  version: 1.0.0

servers:
  - url: /api

paths:
  /:
    get:
      summary: Home endpoint
      description: Welcome message for the User API
      responses:
        '200':
          description: Welcome message
          content:
            text/plain:
              schema:
                type: string

  /connection:
    get:
      summary: Test API connection
      description: Test the connection to the API.
      responses:
        '200':
          description: Successfully connected
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully connected to the API

  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users or filter users by name.
      parameters:
        - name: starts_with
          in: query
          description: Filter users whose names start with a given string
          required: false
          schema:
            type: string
        - name: contains
          in: query
          description: Filter users whose names contain a given string
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: Add a new user
      description: Add a new user to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User added
                  user:
                    $ref: '#/components/schemas/User'

  /users/{user_id}:
    get:
      summary: Get user by ID
      description: Retrieve user information by user ID.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found

    put:
      summary: Update user by ID
      description: Update an existing user with the provided user ID.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated
                  user:
                    $ref: '#/components/schemas/User'

    delete:
      summary: Delete user by ID
      description: Remove a user by their user ID.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted

  /movies:
    get:
      summary: Get all movies
      description: Retrieve a list of all movies or filter movies by title.
      parameters:
        - name: title
          in: query
          description: Filter movies by title
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'

    post:
      summary: Add a new movie
      description: Add a new movie to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieInput'
      responses:
        '201':
          description: Movie added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie added
                  movie:
                    $ref: '#/components/schemas/Movie'

  /movies/{movie_id}:
    get:
      summary: Get movie by ID
      description: Retrieve movie information by movie ID.
      parameters:
        - name: movie_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Movie found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie not found

    put:
      summary: Update movie by ID
      description: Update an existing movie with the provided movie ID.
      parameters:
        - name: movie_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieInput'
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie updated
                  movie:
                    $ref: '#/components/schemas/Movie'

    delete:
      summary: Delete movie by ID
      description: Remove a movie by its movie ID.
      parameters:
        - name: movie_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Movie deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Movie deleted

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: jane_doe
        email:
          type: string
          example: jane.doe@example.com

    UserInput:
      type: object
      properties:
        username:
          type: string
        email:
          type: string

    Movie:
      type: object
      properties:
        movie_id:
          type: integer
          example: 1
        title:
          type: string
          example: Inception
        genre:
          type: string
          example: Sci-Fi
        release_year:
          type: integer
          example: 2010
        director:
          type: string
          example: Christopher Nolan

    MovieInput:
      type: object
      properties:
        title:
          type: string
        genre:
          type: string
        release_year:
          type: integer
        director:
          type: string
